#+TITLE: Notes on PiH
#+AUTHOR: @frankpf

* Chapter 1
The functional style is quite different from most popular languages. Most of
those are based on the idea of changing stored values, while Haskell is based
upon the idea of applying functions to arguments. This leads to much simpler
programs.

** Functions
Haskell uses the following syntax for functions:
: double x = x + x -- defines double x
: double 6 -- evaluates to 12

** Haskell features
- Concise programs :: due to the high-level nature of the functional style,
     Haskell programs are often times shorter.
- Powerful type system :: Haskell has strong, static typing. Its type system has
     powerful features, such as type inference, type classes and parametric
     polymorphism.
- Monadic effects :: Functions in Haskell are pure, meaning they do not have
     side effects[1].
- Lazy evaluation :: No computation is performed until its result is actually
     required. This allows for a modular style using intermediate data
     structures.
- Reasoning about programs :: Because programs are pure, simple /equational
     reasoning/ can be applied to Haskell programs.

[1]: A function is said to have side effects if modifies some state or has some
/observable/ interaction with the outside world. For example, a function might
modify a global variable, raise an exception, write data to a display or file.

** A taste of Haskell
: sum :: Num a => [a] -> a
: sum [] = 0
: sum (x:xs) = x + sum xs

sum [x] = x + sum [] = x + 0 = x

The type declaration of this function can be read as: ~sum~ is a function that
takes a list of numbers (~[a]~) as argument and returns another number (~a~).

Types provide useful documentation to programmers and, more importantly, allow a
greater number of errors to be detected at compile-time. Therefore, a more
powerful type system leads to less bugs.


#+BEGIN_SRC haskell
  qsort [] = []
  qsort (x:xs) = qsort smaller ++ [x] ++ qsort larger
                 where
                   smaller = [a | a <- xs, a <= x]
                   larger [b | b <- xs, b > x]
#+END_SRC

** Exercises
2. sum [x] = x + sum [] = x + 0 = x
3.
: product :: Num a => [a] -> a
: product [] = 1
: product (x:xs) = x * product xs
4. ~qsort smaller ++ [x] ++ qsort larger~ would be ~qsort larger ++ [x] ++ qsort
smaller~
1. Duplicates would be removed.

* Chapter 2
** Common library functions
- ~car~ of a list:
  : head [1,2,3] => 1

- ~cdr~ of a list:
  : tail [1,2,3] => [2,3]

- Select the nth element of a list:
  : [1,2,3] !! 2 => 3

- Take the first n elements of a list:
  : take 2 [1,2,3] => [1,2]

- Drop the first n elements of a list:
  : drop 2 [1,2,3] => [3]

- Length of a list:
  : length [1,2,3] => 3

- Sum of a list:
  : sum [-11,2,3] => 4

- Product of a list:
  : product [-1,2,3] => -6

- Append two lists:
  : [1,2] ++ [3] => 3

- Reverse a list:
  : reverse [1,2,3] => [1,2,3]

** Comments
- Ordinary:
  : -- This is a comment

- Nested:
  : {-
  : Multi-line
  : comments!
  : -}

** Exercises
 4.
#+BEGIN_SRC haskell
  last1 :: [a] -> a
  last1 l = head (reverse l)

  import Data.Maybe

  last2 :: [a] -> Maybe a
  last2 [] = Nothing
  last2 [x] = Just x
  last2 (x:xs) = last xs
#+END_SRC
5.
#+BEGIN_SRC haskell
  init1 :: [a] -> [a]
  init1 [x] = []
  init1 (x:xs) = [x] ++ init1 xs

  init2 :: [a] -> [a]
  init2 l = take (length l - 1) l
#+END_SRC

* Chapter 3
A type is a set of values. For example, ~Bool~ is the set {~False~, ~True~}, and
~Bool -> Bool~ is the set that contains all functions that map boolean arguments
to boolean results, such as the ~not~ function.

The notation ~v :: T~ is used to denote that the value ~v~ is of type ~T~, and
say that "v has type T".

Every expression has a type in Haskell, calculated at compile-time using type
inference. The key to this process is a rule which states that if /f/ is a
function that maps arguments of type /A/ to type /B/ and /e/ is an expression of
type /A/, then /f e/ has type /B/.

: f :: A -> B ∧ e :: A     →     f e :: B

For example, the typing ~not False :: Bool~ can be inferred from this rule using
the fact that ~not :: Bool~ and ~False :: Bool~. OTOH, ~not 3~ does not have a
type, because that would require ~3 :: Bool~.

Because type inference happens at compile-time, Haskell programs are /type
safe/, meaning that type errors can never occur during evaluation.

The downside of type safety is that some expressions that evaluate will be
rejected. For example, ~if True then 1 else False~ evaluates to 1, but contains
a type error: the typing rule for a conditional expression requires that both
possible results have the same type. In practice, however, programmers quickly
learn how to avoid these problems.

In GHCI, type ~:t~ to show the type of any expression:
: :t (+)    =>    Num a => a -> a -> a

** Basic types
- Bool :: logical values ~True~ and ~False~
- Char :: single characters, denoted by single quotes, such as 'a', '_', '\n'
- String :: strings of characters, denoted by double quotes
- Int :: fixed-precision integers
- Integer :: arbitrary-precision integers (less performant than ~Int~)
- Float :: single-precision floating-point numbers

A single number may have more than one numeric type. For example, ~3 :: Int~,
~3:: Integer~ and ~3 :: Float~ are all valid typings for 3.

** List types
We write ~[T]~ for the type of a list with elements of type ~T~. For example,
~[Bool]~ is the type of a list of ~Bool~s and ~[['a','b'],['c','d']]~ is of type
~[ [Char] ]~.

The number of elements in a list is called its /length/.

** Tuple types
A ~tuple~ is a finite sequence of elements with possibly different types. We
write ~(T_1, T_2, ..., T_n)~ for the types of tuples. For example,
~([True, False], 3, "abc")~ has type ~Num t => ([Bool], t, [Char])~ (note [Char]
is equal to String).

The number of elements in a tuple is called its /arity/. Tuples of arity 1 such
as ~(False)~ are not permitted. In contrast to lists, the type of tuples *do*
determine their arity (list types *do not* convey their length).

Unlike lists, tuples must have a finite size so their types can be calculated at
compile time.

** Function types
Functions do not have to be ~total~ on their argument type. This means that
there may be some arguments for which the result is undefined. ~head~, for
example, is undefined for the empty list.

** Curried functions
Functions in Haskell are curried by default, meaning they take their argument
one at a time. This is interesting because partial application can be used to
create new useful functions.

** Parametric polymorphism
The type of length is:
: length :: [a] -> Int

This means that, for any type ~a~, ~length~ takes a list of ~a~s and returns an
~Int~.

A type that contains one or more type variables is called polymorphic. Hence,
~[a] -> Int~ is a polymorphic type and ~length~ is a polymorphic function.

** Overloaded types
The arithmetic operator + is overloaded:
: 1 + 2 => 3
: 1.5 + 2.2 => 3.7

The idea that + can be applied to numbers of any numeric type is denoted in its
type using a /class constraint/:

: (+) :: Num a => a -> a -> a

This means that for any type ~a~ that is an /instance/ of the ~Num~ typeclass,
the function ~(+)~ has type ~a -> a -> a~. A type or expression that contains one or more
class contraints is called /overloaded/.

Most of the numeric functions in Prelude are overloaded, as are numbers
themselves. For example, ~3~ has type ~Num a => a~, meaning for any numeric type
~a~, ~3~ has type ~a~.

** Basic classes
A type is a collection of values. A /class/ is a collection of types that
support certain overloaded operations called /methods/. Haskell provides a
number of basic classes:

*** *Eq* - equality types
Contains types whose values can be compared for equality/inequality using the
following methods:

: (==) :: a -> a -> Bool
: (/=) :: a -> a -> Bool

~Bool~, ~Char~, ~String~, ~Int~, ~Integer~, and ~Float~ are instances of the
~Eq~ class. Lists and tuples will also be instances of ~Eq~ if their element and
component types are instances.

*** *Ord* - ordered types
This class is a subset of ~Eq~ (meaning all ~Ord~ instances are ~Eq~ instances).
In addition, ~Ord~ contains types whose values are totally (linearly) ordered,
and as such can be compared with the following six methods:

: (<) :: a -> a -> Bool
: (<=) :: a -> a -> Bool
: (>) :: a -> a -> Bool
: (>=) :: a -> a -> Bool
: min :: a -> a -> a
: max :: a -> a -> a

~Bool~, ~Char~, ~String~, ~Int~, ~Integer~, ~Float~ are instances of ~Ord~.
Lists/tuples will also be if their element/component types are instances of
~Ord~ too.

Strings, lists and tuples are ordered lexicographically.

*** *Show* - showable types
Contains types whose values can be converted into strings of characteres using
the following method:

: show :: a -> String

For example:

: > show False
: "False"

: > show 123
: "123"

*** *Read* - readable types
Dual to ~Show~: contains types whose values can be converted from strings:

: read :: String -> a

For example:

: > read "False" :: Bool
: False

: > read "[1,2,3]" :: [Int]
: [1,2,3]

: > read "\"False\"" :: String
: "False"

*** *Num* - numeric types
*** *Integral* - integral types
*** *Fractional* - fractional types
