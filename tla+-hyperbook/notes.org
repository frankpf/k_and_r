#+TITLE: TLA+ Hyperbook notes

* Principles and Specification Tracks
** Introduction
*** 1.1 Concurrent Computation
    Concepts discussed:
    - Concurrency
    - Concurrent computation
    - Parallel computation
*** 1.2 Modeling Computation
**** The Standard Model
     An abstract system is described as a collection of /behaviors/, each
     representing a possible execution of the system, where a behavior is a sequence
     of /states/ and a state is an assignment of values to variables.

     In this model, an event, also called a /step/, is the transition from one state
     next in a behavior. 
     "I find the standard model to be the *simplest one that scales well to
     descriptions of complex systems*".

*** 1.3 Specification
    A /system model/ is a model of an abstraction of a (digital) system.
    A /specification/ is a description of a system model. 
    A /formal specification/ is one that is written in a precisely defined language.
    A /system specification/ is a specification of a system model.

*** 1.4 Systems and Languages
    The math we need for writing specifications is very simple: elementary concepts
    of sets, functions, and simple logic.

    Although mathematics is simple and elegant, it has two disadvantages:
    - For many algorithms, informal specifications written in pseudocode are simpler
      than ones written in mathematics.
    - Most people are not used to reading mathematical specifications of systems;
      they would prefer specifications that look more like programs.

    PlusCal is a language for writing formal specifications of algorithms.
    Algorithms written in PlusCal are translated into TLA+ specifications that can
    be checked with the TLA+ tools.
    PlusCal is more convenient than TLA+ for describing the flow of control in an
    algorithm. This generally makes it better for specifying sequential algorithms
    and shared-memory multiprocess algorithms. Control flow within a process is
    usually not important in specifications of distributed algorithms, and the
    greater expressiveness of TLA+ makes it better for these algorithms. However,
    TLA+ is usually not much better, and the PlusCal version may be preferable to
    people less comfortable with mathematics.

** The One-Bit clock
   Consider a clock that alternately shows the times 0 and 1.

*** 2.1 The Clock's Behaviors
    We use the standard model to represent the clock. We model the clock with a
    single variable ~b~.

    The clock has two possible behaviors:
    - b = 0 -> b = 1 -> b = 0 -> ...
    - b = 1 -> b = 0 -> b = 1 -> ...

*** 2.2 Describing the Behaviors
    Describing a system more complex than our one-bit clock would be unfeasible.
    Instead of specifying all possible behaviors, we describe two things:

    - The possible initial states
    - The possible steps (transition from one state to the next)

    Initial states can be described using a formula:
    : (b = 0) ∨ (b = 1)

    We call this formula the /initial predicate/.

    If b' is the value of b in its next state, the formula for describing the
    possible steps is:
    : ((b = 0) ∧ (b' = 1)) ∨ ((b = 1) ∧ (b' = 0))

    TLA+ allows us to write this expression in different, many times simpler, ways:
    #+BEGIN_EXAMPLE
∨ (b = 0) ∧ (b' = 1)
∨ (b = 1) ∧ (b' = 0)
    #+END_EXAMPLE

    or 

    #+BEGIN_EXAMPLE
∨ ∧ (b = 0)
  ∧ (b' = 1)
∨ ∧ (b = 1)
  ∧ (b' = 0)
    #+END_EXAMPLE

    We call this formula the /next-state action/ or sometimes /next-state relation/.

*** 2.6 Computing the Behaviors from the Specification
    An /invariant/ of the specification is some formula that is true in all states
    of all behaviors satisfying the spec.

    We can compute all possible behaviors allowed by a specification using a
    directed graph, called the /state graph/, whose nodes are states. We construct
    the state graph /G/ as follows:

    1. We start by setting /G/ to the set of all possible initial states of
       behaviors, which we find by computing all possible assignments of values to
       variables that make the initial predicate true.
    2. For every state /s/ in /G/, we compute as follows all possible states /t/ such
       that /s/ -> /t/ can be a step in a behavior. We substitute the values assigned
       to variables by s for the unprimed variables in the next-state action, and
       then compute all possible assignments of values to the primed variables
       that make the next-state action true.
    3. For every state t found in step 2: (i) we add t to G if it is not already in
       G, and (ii) we draw an edge from s to t.
    4. We repeat steps 2 and 3 until no new states or edges can be added to G.

    If and when this process terminates, the nodes of G consist of all the reachable
    states of the specifications—that is, all states that occur in some behavior satis-
    fying the specification. Every behavior satisfying the specification can be found
    by starting in an initial state (found in step 1) and following a (possibly infinite)
    path in G.
